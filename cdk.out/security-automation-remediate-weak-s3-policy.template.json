{
  "Resources": {
    "policyStrengthCheckerFnServiceRoleCD1B779A": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Owner",
            "Value": "MystiqueInfoSecurity"
          },
          {
            "Key": "ToKnowMore",
            "Value": "https://github.com/miztiik/security-automation-remediate-weak-s3-policy"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/policyStrengthCheckerFn/ServiceRole/Resource"
      }
    },
    "policyStrengthCheckerFnFC3801C6": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "# -*- coding: utf-8 -*-\n\"\"\"\n.. module: check_policy_strength\n    :Actions: Check if policy has wildcard (\"*\") permissions\n    :platform: AWS\n    :copyright: (c) 2020 Mystique.,\n    :license: Apache, see LICENSE for more details.\n.. moduleauthor:: Mystique\n.. contactauthor:: miztiik@github issues\n\"\"\"\n\nimport boto3\nimport os\nimport json\nfrom botocore.exceptions import ClientError\nimport logging\n\n__author__      = 'Mystique'\n__email__       = 'miztiik@github'\n__version__     = '0.0.1'\n__status__      = 'production'\n\n\"\"\"\nGENERIC HELPERS\n\"\"\"\n\nclass global_args:\n    \"\"\"\n    Helper to define global statics\n    \"\"\"\n    OWNER                       = 'Mystique'\n    ENVIRONMENT                 = 'production'\n    REGION_NAME                 = 'us-east-1'\n    TAG_NAME                    = 'put_policy'\n    LOG_LEVEL                   = logging.INFO\n\ndef set_logging(lv=global_args.LOG_LEVEL):\n    '''\n    Helper to enable debugging\n    '''\n    logging.basicConfig(level=lv)\n    logger = logging.getLogger()\n    logger.setLevel(global_args.LOG_LEVEL)\n    # logging.basicConfig(format=\"[%(asctime)s] %(levelname)s [%(module)s.%(funcName)s:%(lineno)d] %(message)s\", datefmt=\"%H:%M:%S\"\n    return logger\n\n# Initialize Logger\nlogger = set_logging(logging.INFO)\n\n\ndef check_policy_strength(policy):\n    # Default we are ASSUMING the policy will be compliant\n    policy_status = { \"is_compliant\": True }\n\n    for st in policy['Statement']:\n      actions = st['Action']\n    \n      if isinstance(actions, str):\n        actions = [actions]\n    \n      if st['Effect'] == 'Allow' and st['Principal'] == '*':\n          for action in actions:\n              parts = action.split(':')\n              service = parts[0]\n              call = parts[1]\n              if call.startswith('Get') or call.startswith('Put'):\n                  policy_status = { \n                      \"is_compliant\": False, \n                      \"reason\": \"Excessive permissive statement detected\", \n                      \"statement\": st \n                  }\n    return policy_status\n\n\ndef lambda_handler(event, context):\n    logger.info(f\"Event:{event}\")\n    resp = {'status':False}\n    EVENT_TYPE=\"PutBucketPolicy\"\n    if 'detail' in event and 'eventName' in event.get('detail'):\n        if event.get('detail').get('eventName') == EVENT_TYPE:\n            new_policy = event.get('detail').get('requestParameters').get('bucketPolicy')\n            resp['resource_id'] = event.get('detail').get('requestParameters').get('bucketName')\n            if new_policy:\n                resp['policy_status'] = check_policy_strength(new_policy)\n                resp['status'] = True\n            else:\n                resp['error_message'] = f\"No bucket policy found\"\n    return resp\n\nif __name__ == '__main__':\n    lambda_handler({}, {})"
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "policyStrengthCheckerFnServiceRoleCD1B779A",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "FunctionName": "check_policy_strength_fn",
        "Tags": [
          {
            "Key": "Owner",
            "Value": "MystiqueInfoSecurity"
          },
          {
            "Key": "ToKnowMore",
            "Value": "https://github.com/miztiik/security-automation-remediate-weak-s3-policy"
          }
        ],
        "Timeout": 5
      },
      "DependsOn": [
        "policyStrengthCheckerFnServiceRoleCD1B779A"
      ],
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/policyStrengthCheckerFn/Resource"
      }
    },
    "getPreviousBucketPolicyFnServiceRoleDF2937E1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Owner",
            "Value": "MystiqueInfoSecurity"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/getPreviousBucketPolicyFn/ServiceRole/Resource"
      }
    },
    "getPreviousBucketPolicyFnServiceRoleDefaultPolicy3BC68247": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "config:GetResourceConfigHistory",
              "Effect": "Allow",
              "Resource": "*",
              "Sid": "GetPreviouBucketPolicy"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "getPreviousBucketPolicyFnServiceRoleDefaultPolicy3BC68247",
        "Roles": [
          {
            "Ref": "getPreviousBucketPolicyFnServiceRoleDF2937E1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/getPreviousBucketPolicyFn/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "getPreviousBucketPolicyFnE629F282": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "# -*- coding: utf-8 -*-\n\"\"\"\n.. module: get_previous_bucket_policy\n    :Actions: get_previous_bucket_policy for given resource\n    :platform: AWS\n    :copyright: (c) 2020 Mystique.,\n    :license: Apache, see LICENSE for more details.\n.. moduleauthor:: Mystique\n.. contactauthor:: miztiik@github issues\n\"\"\"\n\nimport boto3\nimport os\nimport json\nfrom botocore.exceptions import ClientError\nimport logging\n\n\n__author__      = 'Mystique'\n__email__       = 'miztiik@github'\n__version__     = '0.0.1'\n__status__      = 'production'\n\n\"\"\"\nGENERIC HELPERS\n\"\"\"\n\nclass global_args:\n    \"\"\"\n    Helper to define global statics\n    \"\"\"\n    OWNER                       = 'Mystique'\n    ENVIRONMENT                 = 'production'\n    REGION_NAME                 = 'us-east-1'\n    TAG_NAME                    = 'put_policy'\n    LOG_LEVEL                   = logging.INFO\n\n\ndef set_logging(lv=global_args.LOG_LEVEL):\n    '''\n    Helper to enable debugging\n    '''\n    logging.basicConfig(level=lv)\n    logger = logging.getLogger()\n    logger.setLevel(global_args.LOG_LEVEL)\n    # logging.basicConfig(format=\"[%(asctime)s] %(levelname)s [%(module)s.%(funcName)s:%(lineno)d] %(message)s\", datefmt=\"%H:%M:%S\"\n    return logger\n\n# Initialize Logger\nlogger = set_logging(logging.INFO)\n\n\ndef lambda_handler(event, context):\n    resp = {'status': False, 'prev_bucket_policy':{}}\n    logger.info(f\"Event:{event}\")\n    client = boto3.client('config')\n    try:\n        response = client.get_resource_config_history(\n            resourceType='AWS::S3::Bucket',\n            resourceId=event['resource_id'],\n            # resourceId=event.get('id')\n            limit=1\n        )\n        last_config = response['configurationItems'][0]\n        policy_obj = json.loads(last_config['supplementaryConfiguration']['BucketPolicy'])\n        \n        # Buckets can have empty policy - so previous policy can be NONE\n        if policy_obj['policyText']:\n            resp['prev_bucket_policy'] = json.loads(policy_obj['policyText'])\n        resp['resource_id'] = event['resource_id']\n        resp['status'] = True\n    except Exception as e:\n        logger.error(\"Unable to get previous bucket policy\")\n        logger.error(f\"ERROR:{str(e)}\")\n        resp['error_message'] = str(e)\n    return resp\n\n\nif __name__ == '__main__':\n    lambda_handler({}, {})"
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "getPreviousBucketPolicyFnServiceRoleDF2937E1",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "FunctionName": "get_previous_bucket_policy_fn",
        "Tags": [
          {
            "Key": "Owner",
            "Value": "MystiqueInfoSecurity"
          }
        ],
        "Timeout": 5
      },
      "DependsOn": [
        "getPreviousBucketPolicyFnServiceRoleDefaultPolicy3BC68247",
        "getPreviousBucketPolicyFnServiceRoleDF2937E1"
      ],
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/getPreviousBucketPolicyFn/Resource"
      }
    },
    "putPolicyFnServiceRole7DE6EA55": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Owner",
            "Value": "MystiqueInfoSecurity"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/putPolicyFn/ServiceRole/Resource"
      }
    },
    "putPolicyFnServiceRoleDefaultPolicy682E48B1": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:DeleteBucketPolicy"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:s3:::*",
              "Sid": "PutBucketPolicy"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "putPolicyFnServiceRoleDefaultPolicy682E48B1",
        "Roles": [
          {
            "Ref": "putPolicyFnServiceRole7DE6EA55"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/putPolicyFn/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "putPolicyFn8D109BDA": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "# -*- coding: utf-8 -*-\n\"\"\"\n.. module: put_policy\n    :Actions: PUTS the given policy for the given resource\n    :platform: AWS\n    :copyright: (c) 2020 Mystique.,\n    :license: Apache, see LICENSE for more details.\n.. moduleauthor:: Mystique\n.. contactauthor:: miztiik@github issues\n\"\"\"\n\nimport boto3\nimport os\nimport json\nfrom botocore.exceptions import ClientError\nimport logging\n\n\n__author__      = 'Mystique'\n__email__       = 'miztiik@github'\n__version__     = '0.0.1'\n__status__      = 'production'\n\n\"\"\"\nGENERIC HELPERS\n\"\"\"\n\nclass global_args:\n    \"\"\"\n    Helper to define global statics\n    \"\"\"\n    OWNER                       = 'Mystique'\n    ENVIRONMENT                 = 'production'\n    REGION_NAME                 = 'us-east-1'\n    TAG_NAME                    = 'put_policy'\n    LOG_LEVEL                   = logging.INFO\n\n\ndef set_logging(lv=global_args.LOG_LEVEL):\n    '''\n    Helper to enable debugging\n    '''\n    logging.basicConfig(level=lv)\n    logger = logging.getLogger()\n    logger.setLevel(global_args.LOG_LEVEL)\n    # logging.basicConfig(format=\"[%(asctime)s] %(levelname)s [%(module)s.%(funcName)s:%(lineno)d] %(message)s\", datefmt=\"%H:%M:%S\"\n    return logger\n\n\n# Initialize Logger\nlogger = set_logging(logging.INFO)\n\n\ndef put_policy(bucket, policy):\n    resp = {'status': False}\n\n    client = boto3.client('s3')\n    try:\n        # At times buckets have null - {} policy\n        if policy:\n            resp['message'] = client.put_bucket_policy(\n                Bucket=bucket,\n                Policy=json.dumps(policy)\n            )\n        else:\n            resp['message'] = client.delete_bucket_policy(\n                Bucket=bucket\n            )\n        resp['status'] = True\n    except Exception as e:\n        logger.error(\"Unable to put bucket policy\")\n        logger.error(f\"ERROR:{str(e)}\")\n        resp['error_message'] = str(e)\n    return resp\n\n\ndef lambda_handler(event, context):\n    bucket_name = event.get('resource_id')\n    policy = event.get('prev_bucket_policy')\n    resp = event\n    resp['response'] = put_policy(bucket_name, policy)\n    # Mov status from response to parent dict - silently\n    resp['status'] = resp['response'].pop('status', None)\n    return resp\n \n\nif __name__ == '__main__':\n    lambda_handler({}, {})"
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "putPolicyFnServiceRole7DE6EA55",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "FunctionName": "put_policy_fn",
        "Tags": [
          {
            "Key": "Owner",
            "Value": "MystiqueInfoSecurity"
          }
        ],
        "Timeout": 5
      },
      "DependsOn": [
        "putPolicyFnServiceRoleDefaultPolicy682E48B1",
        "putPolicyFnServiceRole7DE6EA55"
      ],
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/putPolicyFn/Resource"
      }
    },
    "stateMachineIdRole62656937": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "states.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Owner",
            "Value": "MystiqueInfoSecurity"
          },
          {
            "Key": "ToKnowMore",
            "Value": "https://github.com/miztiik/security-automation-remediate-weak-s3-policy"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/stateMachineId/Role/Resource"
      }
    },
    "stateMachineIdRoleDefaultPolicy0EA5EE64": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "policyStrengthCheckerFnFC3801C6",
                  "Arn"
                ]
              }
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "putPolicyFn8D109BDA",
                  "Arn"
                ]
              }
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "getPreviousBucketPolicyFnE629F282",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "stateMachineIdRoleDefaultPolicy0EA5EE64",
        "Roles": [
          {
            "Ref": "stateMachineIdRole62656937"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/stateMachineId/Role/DefaultPolicy/Resource"
      }
    },
    "stateMachineIdF7FDD688": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{\"StartAt\":\"checkBucketPolicyTaskId\",\"States\":{\"checkBucketPolicyTaskId\":{\"Next\":\"isPolicyAccetable?\",\"OutputPath\":\"$.policy_compliance\",\"Type\":\"Task\",\"Resource\":\"",
              {
                "Fn::GetAtt": [
                  "policyStrengthCheckerFnFC3801C6",
                  "Arn"
                ]
              },
              "\",\"ResultPath\":\"$.policy_compliance\"},\"isPolicyAccetable?\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.policy_status.is_compliant\",\"BooleanEquals\":true,\"Next\":\"Policy Compliant\"},{\"Variable\":\"$.policy_status.is_compliant\",\"BooleanEquals\":false,\"Next\":\"Wait X Minutes - AWS Config Lags Step Function\"}],\"Default\":\"Policy Remediation Failed\"},\"Policy Remediation Failed\":{\"Type\":\"Fail\",\"Error\":\"Check Logs\",\"Cause\":\"Policy Remediation Failed\"},\"isPolicyRemediationComplete?\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.status\",\"BooleanEquals\":true,\"Next\":\"Policy Compliant\"},{\"Variable\":\"$.status\",\"BooleanEquals\":false,\"Next\":\"Policy Remediation Failed\"}],\"Default\":\"Policy Remediation Failed\"},\"restoreLastPolicyTask\":{\"Next\":\"isPolicyRemediationComplete?\",\"Type\":\"Task\",\"Resource\":\"",
              {
                "Fn::GetAtt": [
                  "putPolicyFn8D109BDA",
                  "Arn"
                ]
              },
              "\",\"ResultPath\":\"$\"},\"getPreviousBucketPolicyTask\":{\"Next\":\"restoreLastPolicyTask\",\"Type\":\"Task\",\"Resource\":\"",
              {
                "Fn::GetAtt": [
                  "getPreviousBucketPolicyFnE629F282",
                  "Arn"
                ]
              },
              "\",\"ResultPath\":\"$\"},\"Wait X Minutes - AWS Config Lags Step Function\":{\"Type\":\"Wait\",\"Seconds\":60,\"Next\":\"getPreviousBucketPolicyTask\"},\"Policy Compliant\":{\"Type\":\"Succeed\",\"Comment\":\"Policy Compliance Evaluation Succeeded\"}},\"TimeoutSeconds\":300}"
            ]
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "stateMachineIdRole62656937",
            "Arn"
          ]
        },
        "Tags": [
          {
            "Key": "Owner",
            "Value": "MystiqueInfoSecurity"
          },
          {
            "Key": "ToKnowMore",
            "Value": "https://github.com/miztiik/security-automation-remediate-weak-s3-policy"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/stateMachineId/Resource"
      }
    },
    "stateMachineIdEventsRoleF8F21970": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Tags": [
          {
            "Key": "Owner",
            "Value": "MystiqueInfoSecurity"
          },
          {
            "Key": "ToKnowMore",
            "Value": "https://github.com/miztiik/security-automation-remediate-weak-s3-policy"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/stateMachineId/EventsRole/Resource"
      }
    },
    "stateMachineIdEventsRoleDefaultPolicy3AEB44AC": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "stateMachineIdF7FDD688"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "stateMachineIdEventsRoleDefaultPolicy3AEB44AC",
        "Roles": [
          {
            "Ref": "stateMachineIdEventsRoleF8F21970"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/stateMachineId/EventsRole/DefaultPolicy/Resource"
      }
    },
    "puts3PolicyEventId651E4323": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Trigger an event for S3 PutBucketPolicy",
        "EventPattern": {
          "detail": {
            "eventSource": [
              "s3.amazonaws.com"
            ],
            "eventName": [
              "PutBucketPolicy"
            ]
          },
          "detail-type": [
            "AWS API Call via CloudTrail"
          ],
          "source": [
            "aws.s3"
          ]
        },
        "Name": "put_s3_policy_event_MystiqueInfoSecurity",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "stateMachineIdF7FDD688"
            },
            "Id": "Target0",
            "RoleArn": {
              "Fn::GetAtt": [
                "stateMachineIdEventsRoleF8F21970",
                "Arn"
              ]
            }
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/puts3PolicyEventId/Resource"
      }
    },
    "s3bucketFBFA637E": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "Tags": [
          {
            "Key": "isLeakBucket",
            "Value": "True"
          },
          {
            "Key": "Owner",
            "Value": "MystiqueInfoSecurity"
          },
          {
            "Key": "ToKnowMore",
            "Value": "https://github.com/miztiik/security-automation-remediate-weak-s3-policy"
          }
        ]
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/s3bucket/Resource"
      }
    },
    "s3DataEventTrailIdS31824FE76": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/s3DataEventTrailId/S3/Resource"
      }
    },
    "s3DataEventTrailIdS3Policy031BF760": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "s3DataEventTrailIdS31824FE76"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetBucketAcl",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Resource": {
                "Fn::GetAtt": [
                  "s3DataEventTrailIdS31824FE76",
                  "Arn"
                ]
              }
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "s3DataEventTrailIdS31824FE76",
                        "Arn"
                      ]
                    },
                    "/AWSLogs/",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/s3DataEventTrailId/S3/Policy/Resource"
      }
    },
    "s3DataEventTrailIdLogGroupF8E9EB3D": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/s3DataEventTrailId/LogGroup"
      }
    },
    "s3DataEventTrailIdLogsRoleCBDEF077": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/s3DataEventTrailId/LogsRole/Resource"
      }
    },
    "s3DataEventTrailIdLogsRoleDefaultPolicy2CEFFC33": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "s3DataEventTrailIdLogGroupF8E9EB3D",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "s3DataEventTrailIdLogsRoleDefaultPolicy2CEFFC33",
        "Roles": [
          {
            "Ref": "s3DataEventTrailIdLogsRoleCBDEF077"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/s3DataEventTrailId/LogsRole/DefaultPolicy/Resource"
      }
    },
    "s3DataEventTrailId328979E4": {
      "Type": "AWS::CloudTrail::Trail",
      "Properties": {
        "IsLogging": true,
        "S3BucketName": {
          "Ref": "s3DataEventTrailIdS31824FE76"
        },
        "CloudWatchLogsLogGroupArn": {
          "Fn::GetAtt": [
            "s3DataEventTrailIdLogGroupF8E9EB3D",
            "Arn"
          ]
        },
        "CloudWatchLogsRoleArn": {
          "Fn::GetAtt": [
            "s3DataEventTrailIdLogsRoleCBDEF077",
            "Arn"
          ]
        },
        "EnableLogFileValidation": true,
        "EventSelectors": [
          {
            "DataResources": [
              {
                "Type": "AWS::S3::Object",
                "Values": [
                  {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "s3bucketFBFA637E",
                            "Arn"
                          ]
                        },
                        "/*"
                      ]
                    ]
                  }
                ]
              }
            ],
            "IncludeManagementEvents": true,
            "ReadWriteType": "WriteOnly"
          }
        ],
        "IncludeGlobalServiceEvents": false,
        "IsMultiRegionTrail": false
      },
      "DependsOn": [
        "s3DataEventTrailIdLogsRoleDefaultPolicy2CEFFC33",
        "s3DataEventTrailIdLogsRoleCBDEF077",
        "s3DataEventTrailIdS3Policy031BF760"
      ],
      "Metadata": {
        "aws:cdk:path": "security-automation-remediate-weak-s3-policy/s3DataEventTrailId/Resource"
      }
    }
  },
  "Outputs": {
    "MonitoredS3Bucket": {
      "Description": "S3 Bucket to Update Policy",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/s3/buckets/",
            {
              "Ref": "s3bucketFBFA637E"
            }
          ]
        ]
      }
    },
    "CloudTrailForS3": {
      "Description": "This trail monitors our S3 Bucket for all PUT events",
      "Value": {
        "Fn::GetAtt": [
          "s3DataEventTrailId328979E4",
          "Arn"
        ]
      }
    },
    "S3PolicyValidatorStateMachine": {
      "Description": "The remediating state machine",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/states/home?#/statemachines/view/",
            {
              "Ref": "stateMachineIdF7FDD688"
            }
          ]
        ]
      }
    },
    "sampleWeakS3Policy": {
      "Description": "WARNING:MAKES THE BUCKET PUBLIC READ.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "{\"Version\": \"2012-10-17\", \"Statement\": [{\"Sid\": \"133-MystiqueInfoSecurity\", \"Effect\": \"Allow\", \"Principal\": \"*\", \"Action\": [\"s3:Get*\"], \"Resource\": \"",
            {
              "Fn::GetAtt": [
                "s3bucketFBFA637E",
                "Arn"
              ]
            },
            "\"}]}"
          ]
        ]
      }
    },
    "sampleRestrictiveS3Policy": {
      "Description": "Allows the root user to Put Objects to this bucket.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "{\"Version\": \"2012-10-17\", \"Statement\": [{\"Sid\": \"105-MystiqueInfoSecurity\", \"Effect\": \"Allow\", \"Principal\": {\"AWS\": [\"arn:aws:iam::",
            {
              "Ref": "AWS::AccountId"
            },
            ":root\"]}, \"Action\": [\"s3:PutObject\"], \"Resource\": [\"",
            {
              "Fn::GetAtt": [
                "s3bucketFBFA637E",
                "Arn"
              ]
            },
            "/*\"]}]}"
          ]
        ]
      }
    }
  }
}